export declare const clientIndexContent = "\nimport axios, {\n  AxiosInstance,\n  AxiosResponse,\n  CreateAxiosDefaults,\n  InternalAxiosRequestConfig,\n} from 'axios';\nimport {\n  baseCreateAxiosDefaults,\n  baseOnRequestFullfilled,\n  baseOnRequestRejected,\n  baseOnResponseFullfiled,\n  baseOnResponseRejected,\n} from './baseConfig';\n\ninterface GetInstanceParams {\n  createAxiosDefaults?: CreateAxiosDefaults;\n\n  onRequestFullfilled?: (config: InternalAxiosRequestConfig<any>) => any;\n  onRequestRejected?: (error: any) => any;\n\n  onResponseFullfilled?: (response: AxiosResponse<any, any>) => any;\n  onResponseRejected?: (error: any) => any;\n}\n\nclass Axios {\n  static instance: AxiosInstance | null = null;\n\n  static getInstance(getInstanceParams?: GetInstanceParams) {\n    const {\n      createAxiosDefaults,\n      onRequestFullfilled,\n      onRequestRejected,\n      onResponseFullfilled,\n      onResponseRejected,\n    } = getInstanceParams ?? {};\n\n    if (!this.instance) {\n      this.instance = axios.create(createAxiosDefaults ?? baseCreateAxiosDefaults);\n\n      this.instance.interceptors.request.use(\n        onRequestFullfilled ?? baseOnRequestFullfilled,\n        onRequestRejected ?? baseOnRequestRejected\n      );\n\n      this.instance.interceptors.response.use(\n        onResponseFullfilled ?? baseOnResponseFullfiled,\n        onResponseRejected ?? baseOnResponseRejected\n      );\n\n      return this.instance;\n    } else {\n      return this.instance;\n    }\n  }\n}\n\nexport const axiosInstance = Axios.getInstance();\nexport const getAxiosInstance = Axios.getInstance;\n";
